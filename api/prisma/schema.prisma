generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Auth0Profile {
  id       Int     @id @default(autoincrement())
  auth0Sid String? @db.VarChar(100)
  nickName String? @db.VarChar(200)
  name     String? @db.VarChar(200)
  sub      String? @db.VarChar(100)
}

model Bundles {
  id     Int      @id @default(autoincrement())
  name   String?  @db.VarChar(200)
  cost   Decimal? @db.Decimal(10, 3)
  gameId Int?
}

model Challenge {
  id                    Int                    @id @default(autoincrement())
  name                  String?                @db.VarChar(200)
  gameId                Int?                   @unique(map: "gameId_UNIQUE")
  description           String?                @db.VarChar(1000)
  goldReward            Int?
  requirementId         Int?
  playedTimeRequirement PlayedTimeRequirement? @relation(fields: [requirementId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_challenge_detail")
  challenge             Challenge?             @relation("ChallengeToChallenge", fields: [gameId], references: [gameId], onDelete: NoAction, onUpdate: NoAction, map: "fk_game_challenge")
  other_Challenge       Challenge?             @relation("ChallengeToChallenge")
  userChallenge         UserChallenge[]

  @@index([gameId], map: "game_challenge_idx")
  @@index([requirementId], map: "fk_challenge_detail_idx")
}

model GameTypes {
  id          Int     @id @default(autoincrement())
  name        String? @db.VarChar(200)
  description String? @db.VarChar(500)
  games       Games[]
}

model Games {
  id             Int        @id @default(autoincrement())
  steamId        Int?       @unique(map: "steamId_UNIQUE")
  name           String?    @db.VarChar(45)
  description    String?    @db.VarChar(1000)
  gameUrl        String?    @db.VarChar(200)
  logo           String?    @db.VarChar(200)
  socialTwitter  String?    @db.VarChar(200)
  socialDiscord  String?    @db.VarChar(200)
  socialTelegram String?    @db.VarChar(200)
  gameTypeId     Int?
  appId          Int?
  gameTypes      GameTypes? @relation(fields: [gameTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_game_type")

  @@index([gameTypeId], map: "fk_game_type_idx")
}

model PlayedTimeRequirement {
  id          Int         @id @default(autoincrement())
  description String?     @db.VarChar(1000)
  playedTime  Int?
  reward      Int?
  challenge   Challenge[]
}

model UserChallenge {
  userSteamId String    @db.VarChar(100)
  challengeId Int
  status      Int?      @default(0)
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "challenge")
  users       Users     @relation(fields: [userSteamId], references: [steamId], onDelete: NoAction, onUpdate: NoAction, map: "user_challenge")

  @@id([challengeId, userSteamId])
  @@index([challengeId], map: "challenge_game_idx")
  @@index([userSteamId], map: "user_challenge_idx")
}

model Users {
  id               Int             @id @default(autoincrement())
  email            String?         @unique(map: "email_UNIQUE") @db.VarChar(200)
  walletAddress    String?         @unique(map: "walletAddress_UNIQUE") @db.VarChar(42)
  steamId          String?         @unique(map: "steamId_UNIQUE") @db.VarChar(100)
  imageUrl         String?         @db.VarChar(200)
  auth0Sid         String?         @db.VarChar(100)
  auth0NickName    String?         @db.VarChar(45)
  auth0Name        String?         @db.VarChar(200)
  auth0Sub         String?         @unique(map: "auth0Sub_UNIQUE") @db.VarChar(100)
  steamTimeCreated DateTime?       @db.Timestamp(6)
  gold             Int?            @default(0)
  chest            Chest[]
  userChallenge    UserChallenge[]

  @@index([auth0Sid], map: "fk_user_auth0_idx")
  @@index([steamId], map: "fk_user_steam_idx")
}

model Box {
  id          Int     @id
  name        String? @db.VarChar(200)
  description String? @db.VarChar(2000)
  image       String? @db.VarChar(200)
}

model Chest {
  id          Int          @id @default(autoincrement())
  name        String?      @db.VarChar(1000)
  description String?      @db.VarChar(2000)
  image       String?      @db.VarChar(500)
  claimDate   DateTime?    @db.DateTime(0)
  rarityId    Int?
  auth0Sub    String?      @db.VarChar(100)
  chestRarity ChestRarity? @relation(fields: [rarityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Chest_Rarity")
  users       Users?       @relation(fields: [auth0Sub], references: [auth0Sub], onDelete: NoAction, onUpdate: NoAction, map: "fk_Chest_User")

  @@index([rarityId], map: "fk_Chest_Rarity_idx")
  @@index([auth0Sub], map: "fk_Chest_User_idx")
}

model ChestRarity {
  id     Int     @id
  name   String? @db.VarChar(200)
  status Int?    @default(1)
  chest  Chest[]
}
